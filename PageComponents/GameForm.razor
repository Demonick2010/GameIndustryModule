@using GameIndustryModule2.Helpers

@inject IRepository _db
@*Урок 15 (3)*@
<EditForm Model="Game" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />

	<div class="form-group">
		<label>Name: </label>
		<div>
			<InputText class="form-control" @bind-Value="Game.Name" />
			<ValidationMessage For="@(() => Game.Name)" class="text-danger" />
		</div>
	</div>
	<div class="form-group">
		<label>Gameplay video: </label>
		<div>
			<InputText class="form-control" @bind-Value="Game.GameplayVideo" />
			<ValidationMessage For="@(() => Game.GameplayVideo)" class="text-danger" />
		</div>
	</div>
	<div class="form-group">
		<label>Release Date: </label>
		<div>
			<InputDate class="form-control" @bind-Value="Game.ReleaseDate" />
			<ValidationMessage For="@(() => Game.ReleaseDate)" class="text-danger" />
		</div>
	</div>
	@*Далее переходим в DeveloperForm*@
	<div class="form-group">
		<InputImage Label="Image" OnImageFileSelected="ImageFileSelectedHandler" ImageUrl="@imageUrl" />
	</div>
	<div class="form-check">
		<InputCheckbox @bind-Value="Game.InSale" class="form-check-input" type="checkbox" id="gridCheck1" />
		<label class="form-check-label" for="gridCheck1">In Sale?:</label>
	</div>

	@*Урок 14 (3)*@
	<div class="form-group form-markdown">
		<DeveloperMarkdownInput @bind-Value="Game.Description"
								Label="Description"
								OnFor="@(() => Game.Description)" />
	</div>

	@*Урок 16 (4.1)*@
	<div class="form-group">
		<label>Game Genres</label>
		<MultipleSelector OnSelected="Selected" OnNotSelected="NotSelected" />
	</div>

	@*Урок 17 (5.1)*@
	<div class="form-group">
		<label>Developers: </label>
		<MultipleSelectorTypeahead Context="GameDeveloper" OnSearch="SearchHandler" OnSelectedElements="SelectedDevelopers">
			@*Урок 17 (5.3)*@
			<ResultTemplate>
				<img style="width: 50px;" src="@GameDeveloper.Image" />
				@GameDeveloper.Name
			</ResultTemplate>
			<ListTemplate>
				@GameDeveloper.Name
			</ListTemplate>
		</MultipleSelectorTypeahead>
	</div>

	<button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>

@code {
	[Parameter] public Game Game { get; set; }
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	// Урок 16 (4.2)
	// Поскольку нам надо понимать при редактировании, какие жанры были у игры, создаём 2 массива
	[Parameter] public List<Genre> SelectedGenres { get; set; } = new();
	[Parameter] public List<Genre> NotSelectedGenres { get; set; } = new();

	// Урок 16 (4.3)
	// Поскольку в компоненте мы работаем со вспомогательной меделью мультиселектора, создаём и её массивы
	[Parameter] public List<MultipleSelectorHelperModel> Selected { get; set; } = new();
	[Parameter] public List<MultipleSelectorHelperModel> NotSelected { get; set; } = new();

	@*Урок 17 (5.4)*@
	[Parameter] public List<GameDeveloper> SelectedDevelopers { get; set; } = new();

	string imageUrl;

	protected override void OnInitialized()
	{
		// Урок 16 (4.4)
		// Конвертируем модель Genre в MultipleSelectorHelperModel
		Selected = SelectedGenres.Select(x => new MultipleSelectorHelperModel(x.Id.ToString(), x.Name)).ToList();
		NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorHelperModel(x.Id.ToString(), x.Name)).ToList();

		if (Game.ReleaseDate is null)
			Game.ReleaseDate = DateTime.Now;

		if (!string.IsNullOrWhiteSpace(Game.Image))
		{
			imageUrl = Game.Image;
			Game.Image = null;
		}
	}

	void ImageFileSelectedHandler(string imageBase64)
	{
		Game.Image = imageBase64;
		imageUrl = null;
	}

	// Урок 17 (5.2)
	async Task<IEnumerable<GameDeveloper>> SearchHandler(string searchText)
    {
        return _db.GetAllDevelopers();
    }
}
